{{#each services}}
import { I{{{pascalCase name}}}{{{@root.postfix}}} } from './{{{@root.serverDirName}}}/i-{{{hyphenCase name}}}-{{{hyphenCase @root.postfix}}}';
{{/each}}
import {
  {{{transformReqFuncName}}} as transformRequest,
  {{{transformResFuncName}}} as transformResponse
} from '{{{transformFuncPath}}}';
import { inject, injectable } from 'tsyringe';
import { ErrorResponse } from '@digital/domain/models/api/error-response';
import { IcHttpResponse } from '@digital/ic-digital-core';

@injectable()
export class RouteHandler {
  constructor(
    {{#each services}}
    @inject('I{{{pascalCase name}}}{{{@root.postfix}}}') private {{{camelCase name}}}: I{{{pascalCase name}}}{{{@root.postfix}}},
    {{/each}}
  ) { }

  private async applyTransforms(req, reply, handlerFunc) {
    const transformedRequest = transformRequest(req);

    try {
      const handlerResponse = await handlerFunc(transformedRequest);
      const transformedResponse = transformResponse(handlerResponse, reply);
      return transformedResponse;
    } catch (e) {
      const error = e as IcHttpResponse<any>;

      throw {
        timestamp: new Date().toISOString(),
        message: error?.message,
        body: error?.body || {},
        statusCode: error?.status
      } as ErrorResponse;
    }
  }

{{#each services}}
{{#each operations}}
  {{{name}}} = async (req, reply) => await this.applyTransforms(req, reply, this.{{{camelCase service}}}.{{{name}}});
{{/each}}
{{/each}}
}
