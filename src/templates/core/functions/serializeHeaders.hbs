const serializeHeaders = (headers?: Record<string, any>): Record<string, any> | undefined => {
	if (!headers) {
		return headers;
	}

	const out: Record<string, any> = {};

	Object.entries(headers).forEach(([hKey, hValue]) => {
		if (!(hValue instanceof SerializableParameter)) {
			out[hKey] = hValue;
			return;
		}

		const explode = hValue.explode || false;
		const value = hValue.parameterValue;

		if (Array.isArray(value)) {
			out[hKey] = value.join(',');
		} else if (typeof value === 'object') {
			if (!explode) {
				out[hKey] = Object.entries(value).map(([k, v]) => `${k},${v}`).join(',');
				return;
			}

			out[hKey] = Object.entries(value).map(([k, v]) => `${k}=${v}`).join(',');
		} else {
			out[hKey] = value;
		}
	});

	return out;
};
