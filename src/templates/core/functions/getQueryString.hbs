export const getQueryString = (params: Record<string, any>): string => {
	const qs: string[] = [];

	const append = (key: string, value: any) => {
		qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);
	};

	const process = (key: string, value: any, style = 'form', explode = true) => {
		if (isDefined(value)) {
			if (value instanceof SerializableParameter) {
				process(
					value.parameterName,
					value.parameterValue,
					value.style || style,
					value.explode !== null ? value.explode : explode,
				);
			} else if (Array.isArray(value)) {
				if (!explode && style === 'form') {
					append(key, value.join(','));
				} else if (!explode && style === 'spaceDelimited') {
					append(key, value.join(' '));
				} else if (!explode && style === 'pipeDelimited') {
					append(key, value.join('|'));
				} else {
					value.forEach(v => {
						process(key, v);
					});
				}
			} else if (typeof value === 'object') {
				if (style === 'form') {
					if (explode) {
						Object.entries(value).forEach(([k, v]) => {
							append(k, v);
						});
					} else {
						append(
							key,
							Object.entries(value).map(([k, v]) => `${k},${v}`).join(',')
						);
					}
				} else {
					Object.entries(value).forEach(([k, v]) => {
						process(`${key}[${k}]`, v);
					});
				}
			} else {
				append(key, value);
			}
		}
	};

	Object.entries(params).forEach(([key, value]) => {
		process(key, value);
	});

	if (qs.length > 0) {
		return `?${qs.join('&')}`;
	}

	return '';
};
