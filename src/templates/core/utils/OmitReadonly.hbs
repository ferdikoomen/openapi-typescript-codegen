/**
 * The contents of this file are inspired from https://github.com/ts-essentials/ts-essentials#ReadonlyKeys
 *
 * The MIT License
 *
 * Copyright (c) 2018-2019 Chris Kaczor (github.com/krzkaczor)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * */

type Writable<T> = { -readonly [P in keyof T]: T[P] };

type IsEqualConsideringWritability<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2
    ? true
    : false;

type IsFullyWritable<T extends object> = IsEqualConsideringWritability<
	{ [Q in keyof T]: T[Q] },
	Writable<{ [Q in keyof T]: T[Q] }>
>;

/** Gets keys of an object which are readonly */
type ReadonlyKeys<T extends object> = {
    [P in keyof T]-?: IsFullyWritable<Pick<T, P>> extends true ? never : P;
}[keyof T];

/**
 * Exclude keys of an object which are readonly
 * In case of union types containing types not extending object, type is inferred as-is
 * */
export declare type OmitReadonly<T> = T extends object ? Omit<T, ReadonlyKeys<T>> : T;
