// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v2 should generate: test/generated/v2/client/CollectionFormat.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 */
export const collectionFormat = createClientResolver<Types.CollectionFormatCollectionFormatInput, Types.CollectionFormatCollectionFormatOutput>({ path: '/api/v{api-version}/collectionFormat', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Complex.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns ModelWithString Successful response
 */
export const complexTypes = createClientResolver<Types.ComplexComplexTypesInput, Types.ComplexComplexTypesOutput>({ path: '/api/v{api-version}/complex', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 */
export const serviceWithEmptyTag = createClientResolver<Types.DefaultServiceWithEmptyTagInput, Types.DefaultServiceWithEmptyTagOutput>({ path: '/api/v{api-version}/no-tag', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Defaults.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 */
export const callWithDefaultParameters = createClientResolver<Types.DefaultsCallWithDefaultParametersInput, Types.DefaultsCallWithDefaultParametersOutput>({ path: '/api/v{api-version}/defaults', method: 'GET' });
/**
 */
export const callWithDefaultOptionalParameters = createClientResolver<Types.DefaultsCallWithDefaultOptionalParametersInput, Types.DefaultsCallWithDefaultOptionalParametersOutput>({ path: '/api/v{api-version}/defaults', method: 'POST' });
/**
 */
export const callToTestOrderOfParams = createClientResolver<Types.DefaultsCallToTestOrderOfParamsInput, Types.DefaultsCallToTestOrderOfParamsOutput>({ path: '/api/v{api-version}/defaults', method: 'PUT' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Descriptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 */
export const callWithDescriptions = createClientResolver<Types.DescriptionsCallWithDescriptionsInput, Types.DescriptionsCallWithDescriptionsOutput>({ path: '/api/v{api-version}/descriptions/', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Duplicate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 */
export const duplicateName = createClientResolver<Types.DuplicateDuplicateNameInput, Types.DuplicateDuplicateNameOutput>({ path: '/api/v{api-version}/duplicate', method: 'GET' });
/**
 */
export const duplicateName1 = createClientResolver<Types.DuplicateDuplicateName1Input, Types.DuplicateDuplicateName1Output>({ path: '/api/v{api-version}/duplicate', method: 'POST' });
/**
 */
export const duplicateName2 = createClientResolver<Types.DuplicateDuplicateName2Input, Types.DuplicateDuplicateName2Output>({ path: '/api/v{api-version}/duplicate', method: 'PUT' });
/**
 */
export const duplicateName3 = createClientResolver<Types.DuplicateDuplicateName3Input, Types.DuplicateDuplicateName3Output>({ path: '/api/v{api-version}/duplicate', method: 'DELETE' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Error.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns any Custom message: Successful response
 */
export const testErrorCode = createClientResolver<Types.ErrorTestErrorCodeInput, Types.ErrorTestErrorCodeOutput>({ path: '/api/v{api-version}/error', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Header.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns string Successful response
 */
export const callWithResultFromHeader = createClientResolver<Types.HeaderCallWithResultFromHeaderInput, Types.HeaderCallWithResultFromHeaderOutput>({ path: '/api/v{api-version}/header', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/client/MultipleTags1.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const dummyA = createClientResolver<Types.MultipleTags1DummyAInput, Types.MultipleTags1DummyAOutput>({ path: '/api/v{api-version}/multiple-tags/a', method: 'GET' });
/**
 * @returns void
 */
export const dummyB = createClientResolver<Types.MultipleTags1DummyBInput, Types.MultipleTags1DummyBOutput>({ path: '/api/v{api-version}/multiple-tags/b', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/MultipleTags2.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const dummyA = createClientResolver<Types.MultipleTags2DummyAInput, Types.MultipleTags2DummyAOutput>({ path: '/api/v{api-version}/multiple-tags/a', method: 'GET' });
/**
 * @returns void
 */
export const dummyB = createClientResolver<Types.MultipleTags2DummyBInput, Types.MultipleTags2DummyBOutput>({ path: '/api/v{api-version}/multiple-tags/b', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/MultipleTags3.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const dummyB = createClientResolver<Types.MultipleTags3DummyBInput, Types.MultipleTags3DummyBOutput>({ path: '/api/v{api-version}/multiple-tags/b', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/NoContent.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const callWithNoContentResponse = createClientResolver<Types.NoContentCallWithNoContentResponseInput, Types.NoContentCallWithNoContentResponseOutput>({ path: '/api/v{api-version}/no-content', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Parameters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 */
export const callWithParameters = createClientResolver<Types.ParametersCallWithParametersInput, Types.ParametersCallWithParametersOutput>({ path: '/api/v{api-version}/parameters/{parameterPath}', method: 'POST' });
/**
 */
export const callWithWeirdParameterNames = createClientResolver<Types.ParametersCallWithWeirdParameterNamesInput, Types.ParametersCallWithWeirdParameterNamesOutput>({ path: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Response.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns ModelWithString Message for default response
 */
export const callWithResponse = createClientResolver<Types.ResponseCallWithResponseInput, Types.ResponseCallWithResponseOutput>({ path: '/api/v{api-version}/response', method: 'GET' });
/**
 * @returns ModelWithString Message for default response
 */
export const callWithDuplicateResponses = createClientResolver<Types.ResponseCallWithDuplicateResponsesInput, Types.ResponseCallWithDuplicateResponsesOutput>({ path: '/api/v{api-version}/response', method: 'POST' });
/**
 * @returns any Message for 200 response
 * @returns ModelWithString Message for default response
 * @returns ModelThatExtends Message for 201 response
 * @returns ModelThatExtendsExtends Message for 202 response
 */
export const callWithResponses = createClientResolver<Types.ResponseCallWithResponsesInput, Types.ResponseCallWithResponsesOutput>({ path: '/api/v{api-version}/response', method: 'PUT' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Simple.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 */
export const getCallWithoutParametersAndResponse = createClientResolver<Types.SimpleGetCallWithoutParametersAndResponseInput, Types.SimpleGetCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'GET' });
/**
 */
export const putCallWithoutParametersAndResponse = createClientResolver<Types.SimplePutCallWithoutParametersAndResponseInput, Types.SimplePutCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'PUT' });
/**
 */
export const postCallWithoutParametersAndResponse = createClientResolver<Types.SimplePostCallWithoutParametersAndResponseInput, Types.SimplePostCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'POST' });
/**
 */
export const deleteCallWithoutParametersAndResponse = createClientResolver<Types.SimpleDeleteCallWithoutParametersAndResponseInput, Types.SimpleDeleteCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'DELETE' });
/**
 */
export const optionsCallWithoutParametersAndResponse = createClientResolver<Types.SimpleOptionsCallWithoutParametersAndResponseInput, Types.SimpleOptionsCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'OPTIONS' });
/**
 */
export const headCallWithoutParametersAndResponse = createClientResolver<Types.SimpleHeadCallWithoutParametersAndResponseInput, Types.SimpleHeadCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'HEAD' });
/**
 */
export const patchCallWithoutParametersAndResponse = createClientResolver<Types.SimplePatchCallWithoutParametersAndResponseInput, Types.SimplePatchCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'PATCH' });

"
`;

exports[`v2 should generate: test/generated/v2/client/Types.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createClientResolver } from '../../../../factories-module'

/**
 * @returns number Response is a simple number
 * @returns string Response is a simple string
 * @returns boolean Response is a simple boolean
 * @returns any Response is a simple object
 */
export const types = createClientResolver<Types.TypesTypesInput, Types.TypesTypesOutput>({ path: '/api/v{api-version}/types', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/client/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export * as Default from './Default.js'
export * as Simple from './Simple.js'
export * as Descriptions from './Descriptions.js'
export * as Parameters from './Parameters.js'
export * as Defaults from './Defaults.js'
export * as Duplicate from './Duplicate.js'
export * as NoContent from './NoContent.js'
export * as MultipleTags1 from './MultipleTags1.js'
export * as MultipleTags2 from './MultipleTags2.js'
export * as MultipleTags3 from './MultipleTags3.js'
export * as Response from './Response.js'
export * as CollectionFormat from './CollectionFormat.js'
export * as Types from './Types.js'
export * as Complex from './Complex.js'
export * as Header from './Header.js'
export * as Error from './Error.js'

"
`;

exports[`v2 should generate: test/generated/v2/core/ApiError.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

export class ApiError extends Error {
    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;
    public readonly request: ApiRequestOptions;

    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {
        super(message);

        this.name = 'ApiError';
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/core/ApiRequestOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiRequestOptions = {
    readonly method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
    readonly url: string;
    readonly path?: Record<string, any>;
    readonly cookies?: Record<string, any>;
    readonly headers?: Record<string, any>;
    readonly query?: Record<string, any>;
    readonly formData?: Record<string, any>;
    readonly body?: any;
    readonly mediaType?: string;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
};
"
`;

exports[`v2 should generate: test/generated/v2/core/ApiResult.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiResult = {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
};
"
`;

exports[`v2 should generate: test/generated/v2/core/CancelablePromise.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export class CancelError extends Error {

    constructor(message: string) {
        super(message);
        this.name = 'CancelError';
    }

    public get isCancelled(): boolean {
        return true;
    }
}

export interface OnCancel {
    readonly isResolved: boolean;
    readonly isRejected: boolean;
    readonly isCancelled: boolean;

    (cancelHandler: () => void): void;
}

export class CancelablePromise<T> implements Promise<T> {
    #isResolved: boolean;
    #isRejected: boolean;
    #isCancelled: boolean;
    readonly #cancelHandlers: (() => void)[];
    readonly #promise: Promise<T>;
    #resolve?: (value: T | PromiseLike<T>) => void;
    #reject?: (reason?: any) => void;

    constructor(
        executor: (
            resolve: (value: T | PromiseLike<T>) => void,
            reject: (reason?: any) => void,
            onCancel: OnCancel
        ) => void
    ) {
        this.#isResolved = false;
        this.#isRejected = false;
        this.#isCancelled = false;
        this.#cancelHandlers = [];
        this.#promise = new Promise<T>((resolve, reject) => {
            this.#resolve = resolve;
            this.#reject = reject;

            const onResolve = (value: T | PromiseLike<T>): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#isResolved = true;
                this.#resolve?.(value);
            };

            const onReject = (reason?: any): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#isRejected = true;
                this.#reject?.(reason);
            };

            const onCancel = (cancelHandler: () => void): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#cancelHandlers.push(cancelHandler);
            };

            Object.defineProperty(onCancel, 'isResolved', {
                get: (): boolean => this.#isResolved,
            });

            Object.defineProperty(onCancel, 'isRejected', {
                get: (): boolean => this.#isRejected,
            });

            Object.defineProperty(onCancel, 'isCancelled', {
                get: (): boolean => this.#isCancelled,
            });

            return executor(onResolve, onReject, onCancel as OnCancel);
        });
    }

     get [Symbol.toStringTag]() {
            return "Cancellable Promise";
     }

    public then<TResult1 = T, TResult2 = never>(
        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,
        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null
    ): Promise<TResult1 | TResult2> {
        return this.#promise.then(onFulfilled, onRejected);
    }

    public catch<TResult = never>(
        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null
    ): Promise<T | TResult> {
        return this.#promise.catch(onRejected);
    }

    public finally(onFinally?: (() => void) | null): Promise<T> {
        return this.#promise.finally(onFinally);
    }

    public cancel(): void {
        if (this.#isResolved || this.#isRejected || this.#isCancelled) {
            return;
        }
        this.#isCancelled = true;
        if (this.#cancelHandlers.length) {
            try {
                for (const cancelHandler of this.#cancelHandlers) {
                    cancelHandler();
                }
            } catch (error) {
                console.warn('Cancellation threw an error', error);
                return;
            }
        }
        this.#cancelHandlers.length = 0;
        this.#reject?.(new CancelError('Request aborted'));
    }

    public get isCancelled(): boolean {
        return this.#isCancelled;
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/core/OpenAPI.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export type OpenAPIConfig = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string> | undefined;
    USERNAME?: string | Resolver<string> | undefined;
    PASSWORD?: string | Resolver<string> | undefined;
    HEADERS?: Headers | Resolver<Headers> | undefined;
    ENCODE_PATH?: ((path: string) => string) | undefined;
};

export const OpenAPI: OpenAPIConfig = {
    BASE: 'http://localhost:3000/base',
    VERSION: '1.0',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
};
"
`;

exports[`v2 should generate: test/generated/v2/factories/createClientResolver.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ClientResolverConfig = {
    path: string;
    method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
}

export type ClientRequestOptions = Omit<RequestInit, "method" | "body">

export interface ClientResolverFactory {
    <Input, Output>(config: ClientResolverConfig): (input: Input, options?: ClientRequestOptions) => Promise<Output>
}
"
`;

exports[`v2 should generate: test/generated/v2/factories/createHook.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type HookConfig = {
    path: string;
    method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
}

export type HookOptions = Omit<RequestInit, "method" | "body">

export type HookResult<Data> = [Data | undefined, { version?: number; isLoading: boolean }]

export interface HookFactory {
    <Input, Output>(config: HookConfig): (input: Input, options?: HookOptions) => HookResult<Output>
}
"
`;

exports[`v2 should generate: test/generated/v2/factories/createServerResolver.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ServerResolverConfig = {
    path: string;
    method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
}

export type ServerRequestOptions = Omit<RequestInit, "method" | "body">

export interface ServerResolverFactory {
    <Input, Output>(config: ServerResolverConfig): (input: Input, options?: ServerRequestOptions) => Promise<Output>
}
"
`;

exports[`v2 should generate: test/generated/v2/factories/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export * from './types.js'
export * from './createServerResolver.js'
export * from './createClientResolver.js'
export * from './createHook.js'

"
`;

exports[`v2 should generate: test/generated/v2/factories/types.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */


export type DefaultServiceWithEmptyTagInput = undefined
;
export type DefaultServiceWithEmptyTagOutput = void;



export type SimpleGetCallWithoutParametersAndResponseInput = undefined
;
export type SimpleGetCallWithoutParametersAndResponseOutput = void;
export type SimplePutCallWithoutParametersAndResponseInput = undefined
;
export type SimplePutCallWithoutParametersAndResponseOutput = void;
export type SimplePostCallWithoutParametersAndResponseInput = undefined
;
export type SimplePostCallWithoutParametersAndResponseOutput = void;
export type SimpleDeleteCallWithoutParametersAndResponseInput = undefined
;
export type SimpleDeleteCallWithoutParametersAndResponseOutput = void;
export type SimpleOptionsCallWithoutParametersAndResponseInput = undefined
;
export type SimpleOptionsCallWithoutParametersAndResponseOutput = void;
export type SimpleHeadCallWithoutParametersAndResponseInput = undefined
;
export type SimpleHeadCallWithoutParametersAndResponseOutput = void;
export type SimplePatchCallWithoutParametersAndResponseInput = undefined
;
export type SimplePatchCallWithoutParametersAndResponseOutput = void;



export type DescriptionsCallWithDescriptionsInput = {
    /**
     * Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     */
    parameterWithBreaks?: string,
    /**
     * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     */
    parameterWithBackticks?: string,
    /**
     * Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
     */
    parameterWithSlashes?: string,
    /**
     * Testing expression placeholders in string: \${expression} should work
     */
    parameterWithExpressionPlaceholders?: string,
    /**
     * Testing quotes in string: 'single quote''' and "double quotes""" should work
     */
    parameterWithQuotes?: string,
    /**
     * Testing reserved characters in string: * inline * and ** inline ** should work
     */
    parameterWithReservedCharacters?: string,
}
;
export type DescriptionsCallWithDescriptionsOutput = void;



export type ParametersCallWithParametersInput = {
    /**
     * This is the parameter that goes into the header
     */
    parameterHeader: string,
    /**
     * This is the parameter that goes into the query params
     */
    parameterQuery: string,
    /**
     * This is the parameter that goes into the form data
     */
    parameterForm: string,
    /**
     * This is the parameter that is sent as request body
     */
    parameterBody: string,
    /**
     * This is the parameter that goes into the path
     */
    parameterPath: string,
}
;
export type ParametersCallWithParametersOutput = void;
export type ParametersCallWithWeirdParameterNamesInput = {
    /**
     * This is the parameter that goes into the request header
     */
    parameterHeader: string,
    /**
     * This is the parameter that goes into the request query params
     */
    parameterQuery: string,
    /**
     * This is the parameter that goes into the request form data
     */
    parameterForm: string,
    /**
     * This is the parameter that is sent as request body
     */
    parameterBody: string,
    /**
     * This is the parameter that goes into the path
     */
    parameterPath1?: string,
    /**
     * This is the parameter that goes into the path
     */
    parameterPath2?: string,
    /**
     * This is the parameter that goes into the path
     */
    parameterPath3?: string,
    /**
     * This is the parameter with a reserved keyword
     */
    _default?: string,
}
;
export type ParametersCallWithWeirdParameterNamesOutput = void;


import type { ModelWithString } from '../models/ModelWithString';

export type DefaultsCallWithDefaultParametersInput = {
    /**
     * This is a simple string with default value
     */
    parameterString?: string,
    /**
     * This is a simple number with default value
     */
    parameterNumber?: number,
    /**
     * This is a simple boolean with default value
     */
    parameterBoolean?: boolean,
    /**
     * This is a simple enum with default value
     */
    parameterEnum?: 'Success' | 'Warning' | 'Error',
    /**
     * This is a simple model with default value
     */
    parameterModel?: ModelWithString,
}
;
export type DefaultsCallWithDefaultParametersOutput = void;
export type DefaultsCallWithDefaultOptionalParametersInput = {
    /**
     * This is a simple string that is optional with default value
     */
    parameterString?: string,
    /**
     * This is a simple number that is optional with default value
     */
    parameterNumber?: number,
    /**
     * This is a simple boolean that is optional with default value
     */
    parameterBoolean?: boolean,
    /**
     * This is a simple enum that is optional with default value
     */
    parameterEnum?: 'Success' | 'Warning' | 'Error',
    /**
     * This is a simple model that is optional with default value
     */
    parameterModel?: ModelWithString,
}
;
export type DefaultsCallWithDefaultOptionalParametersOutput = void;
export type DefaultsCallToTestOrderOfParamsInput = {
    /**
     * This is a string with no default
     */
    parameterStringWithNoDefault: string,
    /**
     * This is a optional string with default
     */
    parameterOptionalStringWithDefault?: string,
    /**
     * This is a optional string with empty default
     */
    parameterOptionalStringWithEmptyDefault?: string,
    /**
     * This is a optional string with no default
     */
    parameterOptionalStringWithNoDefault?: string,
    /**
     * This is a string with default
     */
    parameterStringWithDefault?: string,
    /**
     * This is a string with empty default
     */
    parameterStringWithEmptyDefault?: string,
    /**
     * This is a string that can be null with no default
     */
    parameterStringNullableWithNoDefault?: string | null,
    /**
     * This is a string that can be null with default
     */
    parameterStringNullableWithDefault?: string | null,
}
;
export type DefaultsCallToTestOrderOfParamsOutput = void;



export type DuplicateDuplicateNameInput = undefined
;
export type DuplicateDuplicateNameOutput = void;
export type DuplicateDuplicateName1Input = undefined
;
export type DuplicateDuplicateName1Output = void;
export type DuplicateDuplicateName2Input = undefined
;
export type DuplicateDuplicateName2Output = void;
export type DuplicateDuplicateName3Input = undefined
;
export type DuplicateDuplicateName3Output = void;



export type NoContentCallWithNoContentResponseInput = undefined
;
export type NoContentCallWithNoContentResponseOutput = void;



export type MultipleTags1DummyAInput = undefined
;
export type MultipleTags1DummyAOutput = void;
export type MultipleTags1DummyBInput = undefined
;
export type MultipleTags1DummyBOutput = void;



export type MultipleTags2DummyAInput = undefined
;
export type MultipleTags2DummyAOutput = void;
export type MultipleTags2DummyBInput = undefined
;
export type MultipleTags2DummyBOutput = void;



export type MultipleTags3DummyBInput = undefined
;
export type MultipleTags3DummyBOutput = void;


import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';

export type ResponseCallWithResponseInput = undefined
;
export type ResponseCallWithResponseOutput = ModelWithString;
export type ResponseCallWithDuplicateResponsesInput = undefined
;
export type ResponseCallWithDuplicateResponsesOutput = ModelWithString;
export type ResponseCallWithResponsesInput = undefined
;
export type ResponseCallWithResponsesOutput = {
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
    readonly value?: Array<ModelWithString>;
} | ModelWithString | ModelThatExtends | ModelThatExtendsExtends;



export type CollectionFormatCollectionFormatInput = {
    /**
     * This is an array parameter that is sent as csv format (comma-separated values)
     */
    parameterArrayCsv: Array<string>,
    /**
     * This is an array parameter that is sent as ssv format (space-separated values)
     */
    parameterArraySsv: Array<string>,
    /**
     * This is an array parameter that is sent as tsv format (tab-separated values)
     */
    parameterArrayTsv: Array<string>,
    /**
     * This is an array parameter that is sent as pipes format (pipe-separated values)
     */
    parameterArrayPipes: Array<string>,
    /**
     * This is an array parameter that is sent as multi format (multiple parameter instances)
     */
    parameterArrayMulti: Array<string>,
}
;
export type CollectionFormatCollectionFormatOutput = void;



export type TypesTypesInput = {
    /**
     * This is an array parameter
     */
    parameterArray: Array<string>,
    /**
     * This is a dictionary parameter
     */
    parameterDictionary: Record<string, string>,
    /**
     * This is an enum parameter
     */
    parameterEnum: 'Success' | 'Warning' | 'Error',
    /**
     * This is a number parameter
     */
    parameterNumber?: number,
    /**
     * This is a string parameter
     */
    parameterString?: string,
    /**
     * This is a boolean parameter
     */
    parameterBoolean?: boolean,
    /**
     * This is an object parameter
     */
    parameterObject?: any,
    /**
     * This is a number parameter
     */
    id?: number,
}
;
export type TypesTypesOutput = number | string | boolean | any;


import type { ModelWithString } from '../models/ModelWithString';

export type ComplexComplexTypesInput = {
    /**
     * Parameter containing object
     */
    parameterObject: {
        first?: {
            second?: {
                third?: string;
            };
        };
    },
    /**
     * Parameter containing reference
     */
    parameterReference: ModelWithString,
}
;
export type ComplexComplexTypesOutput = Array<ModelWithString>;



export type HeaderCallWithResultFromHeaderInput = undefined
;
export type HeaderCallWithResultFromHeaderOutput = string;



export type ErrorTestErrorCodeInput = {
    /**
     * Status code to return
     */
    status: string,
}
;
export type ErrorTestErrorCodeOutput = any;


"
`;

exports[`v2 should generate: test/generated/v2/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { ApiError } from './core/ApiError';
export { CancelablePromise, CancelError } from './core/CancelablePromise';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { _default } from './models/_default';
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { Date } from './models/Date';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $_default } from './schemas/$_default';
export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $Date } from './schemas/$Date';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export * as pathnames from './pathnames'
export * as server from './server'
export * as client from './client'
"
`;

exports[`v2 should generate: test/generated/v2/models/_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type _default = {
    name?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a type-only model that defines Date as a string
 */
export type Date = string;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\'Single Quote\\'',
    _DOUBLE_QUOTES_ = '"Double Quotes"',
}
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithProperties } from './ModelWithProperties';

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;
"
`;

exports[`v2 should generate: test/generated/v2/pathnames/CollectionFormat.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const collectionFormat = '/api/v{api-version}/collectionFormat'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Complex.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const complexTypes = '/api/v{api-version}/complex'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const serviceWithEmptyTag = '/api/v{api-version}/no-tag'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Defaults.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const callWithDefaultParameters = '/api/v{api-version}/defaults'
/**
 * @throws ApiError
 */
export const callWithDefaultOptionalParameters = '/api/v{api-version}/defaults'
/**
 * @throws ApiError
 */
export const callToTestOrderOfParams = '/api/v{api-version}/defaults'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Descriptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const callWithDescriptions = '/api/v{api-version}/descriptions/'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Duplicate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const duplicateName = '/api/v{api-version}/duplicate'
/**
 * @throws ApiError
 */
export const duplicateName1 = '/api/v{api-version}/duplicate'
/**
 * @throws ApiError
 */
export const duplicateName2 = '/api/v{api-version}/duplicate'
/**
 * @throws ApiError
 */
export const duplicateName3 = '/api/v{api-version}/duplicate'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Error.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const testErrorCode = '/api/v{api-version}/error'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Header.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const callWithResultFromHeader = '/api/v{api-version}/header'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/MultipleTags1.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const dummyA = '/api/v{api-version}/multiple-tags/a'
/**
 * @throws ApiError
 */
export const dummyB = '/api/v{api-version}/multiple-tags/b'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/MultipleTags2.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const dummyA = '/api/v{api-version}/multiple-tags/a'
/**
 * @throws ApiError
 */
export const dummyB = '/api/v{api-version}/multiple-tags/b'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/MultipleTags3.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const dummyB = '/api/v{api-version}/multiple-tags/b'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/NoContent.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const callWithNoContentResponse = '/api/v{api-version}/no-content'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Parameters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const callWithParameters = '/api/v{api-version}/parameters/{parameterPath}'
/**
 * @throws ApiError
 */
export const callWithWeirdParameterNames = '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Response.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const callWithResponse = '/api/v{api-version}/response'
/**
 * @throws ApiError
 */
export const callWithDuplicateResponses = '/api/v{api-version}/response'
/**
 * @throws ApiError
 */
export const callWithResponses = '/api/v{api-version}/response'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Simple.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const getCallWithoutParametersAndResponse = '/api/v{api-version}/simple'
/**
 * @throws ApiError
 */
export const putCallWithoutParametersAndResponse = '/api/v{api-version}/simple'
/**
 * @throws ApiError
 */
export const postCallWithoutParametersAndResponse = '/api/v{api-version}/simple'
/**
 * @throws ApiError
 */
export const deleteCallWithoutParametersAndResponse = '/api/v{api-version}/simple'
/**
 * @throws ApiError
 */
export const optionsCallWithoutParametersAndResponse = '/api/v{api-version}/simple'
/**
 * @throws ApiError
 */
export const headCallWithoutParametersAndResponse = '/api/v{api-version}/simple'
/**
 * @throws ApiError
 */
export const patchCallWithoutParametersAndResponse = '/api/v{api-version}/simple'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/Types.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * @throws ApiError
 */
export const types = '/api/v{api-version}/types'

"
`;

exports[`v2 should generate: test/generated/v2/pathnames/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export * as Default from './Default.js'
export * as Simple from './Simple.js'
export * as Descriptions from './Descriptions.js'
export * as Parameters from './Parameters.js'
export * as Defaults from './Defaults.js'
export * as Duplicate from './Duplicate.js'
export * as NoContent from './NoContent.js'
export * as MultipleTags1 from './MultipleTags1.js'
export * as MultipleTags2 from './MultipleTags2.js'
export * as MultipleTags3 from './MultipleTags3.js'
export * as Response from './Response.js'
export * as CollectionFormat from './CollectionFormat.js'
export * as Types from './Types.js'
export * as Complex from './Complex.js'
export * as Header from './Header.js'
export * as Error from './Error.js'

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\`backticks\\\` and \\\`\\\`\\\`multiple backticks\\\`\\\`\\\` should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line

    Fourth line\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\${expression} should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and "double quotes""" should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Date = {
    type: 'string',
    description: \`This is a type-only model that defines Date as a string\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\d{2}-\\\\d{3}-\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: '^[a-zA-Z0-9\\']*$',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/server/CollectionFormat.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 */
export const collectionFormat = createServerResolver<Types.CollectionFormatCollectionFormatInput, Types.CollectionFormatCollectionFormatOutput>({ path: '/api/v{api-version}/collectionFormat', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Complex.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns ModelWithString Successful response
 */
export const complexTypes = createServerResolver<Types.ComplexComplexTypesInput, Types.ComplexComplexTypesOutput>({ path: '/api/v{api-version}/complex', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 */
export const serviceWithEmptyTag = createServerResolver<Types.DefaultServiceWithEmptyTagInput, Types.DefaultServiceWithEmptyTagOutput>({ path: '/api/v{api-version}/no-tag', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Defaults.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 */
export const callWithDefaultParameters = createServerResolver<Types.DefaultsCallWithDefaultParametersInput, Types.DefaultsCallWithDefaultParametersOutput>({ path: '/api/v{api-version}/defaults', method: 'GET' });
/**
 */
export const callWithDefaultOptionalParameters = createServerResolver<Types.DefaultsCallWithDefaultOptionalParametersInput, Types.DefaultsCallWithDefaultOptionalParametersOutput>({ path: '/api/v{api-version}/defaults', method: 'POST' });
/**
 */
export const callToTestOrderOfParams = createServerResolver<Types.DefaultsCallToTestOrderOfParamsInput, Types.DefaultsCallToTestOrderOfParamsOutput>({ path: '/api/v{api-version}/defaults', method: 'PUT' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Descriptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 */
export const callWithDescriptions = createServerResolver<Types.DescriptionsCallWithDescriptionsInput, Types.DescriptionsCallWithDescriptionsOutput>({ path: '/api/v{api-version}/descriptions/', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Duplicate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 */
export const duplicateName = createServerResolver<Types.DuplicateDuplicateNameInput, Types.DuplicateDuplicateNameOutput>({ path: '/api/v{api-version}/duplicate', method: 'GET' });
/**
 */
export const duplicateName1 = createServerResolver<Types.DuplicateDuplicateName1Input, Types.DuplicateDuplicateName1Output>({ path: '/api/v{api-version}/duplicate', method: 'POST' });
/**
 */
export const duplicateName2 = createServerResolver<Types.DuplicateDuplicateName2Input, Types.DuplicateDuplicateName2Output>({ path: '/api/v{api-version}/duplicate', method: 'PUT' });
/**
 */
export const duplicateName3 = createServerResolver<Types.DuplicateDuplicateName3Input, Types.DuplicateDuplicateName3Output>({ path: '/api/v{api-version}/duplicate', method: 'DELETE' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Error.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns any Custom message: Successful response
 */
export const testErrorCode = createServerResolver<Types.ErrorTestErrorCodeInput, Types.ErrorTestErrorCodeOutput>({ path: '/api/v{api-version}/error', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Header.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns string Successful response
 */
export const callWithResultFromHeader = createServerResolver<Types.HeaderCallWithResultFromHeaderInput, Types.HeaderCallWithResultFromHeaderOutput>({ path: '/api/v{api-version}/header', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/server/MultipleTags1.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const dummyA = createServerResolver<Types.MultipleTags1DummyAInput, Types.MultipleTags1DummyAOutput>({ path: '/api/v{api-version}/multiple-tags/a', method: 'GET' });
/**
 * @returns void
 */
export const dummyB = createServerResolver<Types.MultipleTags1DummyBInput, Types.MultipleTags1DummyBOutput>({ path: '/api/v{api-version}/multiple-tags/b', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/MultipleTags2.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const dummyA = createServerResolver<Types.MultipleTags2DummyAInput, Types.MultipleTags2DummyAOutput>({ path: '/api/v{api-version}/multiple-tags/a', method: 'GET' });
/**
 * @returns void
 */
export const dummyB = createServerResolver<Types.MultipleTags2DummyBInput, Types.MultipleTags2DummyBOutput>({ path: '/api/v{api-version}/multiple-tags/b', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/MultipleTags3.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const dummyB = createServerResolver<Types.MultipleTags3DummyBInput, Types.MultipleTags3DummyBOutput>({ path: '/api/v{api-version}/multiple-tags/b', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/NoContent.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns void
 */
export const callWithNoContentResponse = createServerResolver<Types.NoContentCallWithNoContentResponseInput, Types.NoContentCallWithNoContentResponseOutput>({ path: '/api/v{api-version}/no-content', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Parameters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 */
export const callWithParameters = createServerResolver<Types.ParametersCallWithParametersInput, Types.ParametersCallWithParametersOutput>({ path: '/api/v{api-version}/parameters/{parameterPath}', method: 'POST' });
/**
 */
export const callWithWeirdParameterNames = createServerResolver<Types.ParametersCallWithWeirdParameterNamesInput, Types.ParametersCallWithWeirdParameterNamesOutput>({ path: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}', method: 'POST' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Response.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns ModelWithString Message for default response
 */
export const callWithResponse = createServerResolver<Types.ResponseCallWithResponseInput, Types.ResponseCallWithResponseOutput>({ path: '/api/v{api-version}/response', method: 'GET' });
/**
 * @returns ModelWithString Message for default response
 */
export const callWithDuplicateResponses = createServerResolver<Types.ResponseCallWithDuplicateResponsesInput, Types.ResponseCallWithDuplicateResponsesOutput>({ path: '/api/v{api-version}/response', method: 'POST' });
/**
 * @returns any Message for 200 response
 * @returns ModelWithString Message for default response
 * @returns ModelThatExtends Message for 201 response
 * @returns ModelThatExtendsExtends Message for 202 response
 */
export const callWithResponses = createServerResolver<Types.ResponseCallWithResponsesInput, Types.ResponseCallWithResponsesOutput>({ path: '/api/v{api-version}/response', method: 'PUT' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Simple.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 */
export const getCallWithoutParametersAndResponse = createServerResolver<Types.SimpleGetCallWithoutParametersAndResponseInput, Types.SimpleGetCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'GET' });
/**
 */
export const putCallWithoutParametersAndResponse = createServerResolver<Types.SimplePutCallWithoutParametersAndResponseInput, Types.SimplePutCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'PUT' });
/**
 */
export const postCallWithoutParametersAndResponse = createServerResolver<Types.SimplePostCallWithoutParametersAndResponseInput, Types.SimplePostCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'POST' });
/**
 */
export const deleteCallWithoutParametersAndResponse = createServerResolver<Types.SimpleDeleteCallWithoutParametersAndResponseInput, Types.SimpleDeleteCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'DELETE' });
/**
 */
export const optionsCallWithoutParametersAndResponse = createServerResolver<Types.SimpleOptionsCallWithoutParametersAndResponseInput, Types.SimpleOptionsCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'OPTIONS' });
/**
 */
export const headCallWithoutParametersAndResponse = createServerResolver<Types.SimpleHeadCallWithoutParametersAndResponseInput, Types.SimpleHeadCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'HEAD' });
/**
 */
export const patchCallWithoutParametersAndResponse = createServerResolver<Types.SimplePatchCallWithoutParametersAndResponseInput, Types.SimplePatchCallWithoutParametersAndResponseOutput>({ path: '/api/v{api-version}/simple', method: 'PATCH' });

"
`;

exports[`v2 should generate: test/generated/v2/server/Types.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as Types from '../factories/types.js';
import { createServerResolver } from '../../../../factories-module'

/**
 * @returns number Response is a simple number
 * @returns string Response is a simple string
 * @returns boolean Response is a simple boolean
 * @returns any Response is a simple object
 */
export const types = createServerResolver<Types.TypesTypesInput, Types.TypesTypesOutput>({ path: '/api/v{api-version}/types', method: 'GET' });

"
`;

exports[`v2 should generate: test/generated/v2/server/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export * as Default from './Default.js'
export * as Simple from './Simple.js'
export * as Descriptions from './Descriptions.js'
export * as Parameters from './Parameters.js'
export * as Defaults from './Defaults.js'
export * as Duplicate from './Duplicate.js'
export * as NoContent from './NoContent.js'
export * as MultipleTags1 from './MultipleTags1.js'
export * as MultipleTags2 from './MultipleTags2.js'
export * as MultipleTags3 from './MultipleTags3.js'
export * as Response from './Response.js'
export * as CollectionFormat from './CollectionFormat.js'
export * as Types from './Types.js'
export * as Complex from './Complex.js'
export * as Header from './Header.js'
export * as Error from './Error.js'

"
`;

exports[`v3 should generate: test/generated/v3/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { ApiError } from './core/ApiError';
export { CancelablePromise, CancelError } from './core/CancelablePromise';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { _default } from './models/_default';
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { CompositionBaseModel } from './models/CompositionBaseModel';
export type { CompositionExtendedModel } from './models/CompositionExtendedModel';
export type { CompositionWithAllOfAndNullable } from './models/CompositionWithAllOfAndNullable';
export type { CompositionWithAnyOf } from './models/CompositionWithAnyOf';
export type { CompositionWithAnyOfAndNullable } from './models/CompositionWithAnyOfAndNullable';
export type { CompositionWithAnyOfAnonymous } from './models/CompositionWithAnyOfAnonymous';
export type { CompositionWithOneOf } from './models/CompositionWithOneOf';
export type { CompositionWithOneOfAndComplexArrayDictionary } from './models/CompositionWithOneOfAndComplexArrayDictionary';
export type { CompositionWithOneOfAndNullable } from './models/CompositionWithOneOfAndNullable';
export type { CompositionWithOneOfAndSimpleArrayDictionary } from './models/CompositionWithOneOfAndSimpleArrayDictionary';
export type { CompositionWithOneOfAndSimpleDictionary } from './models/CompositionWithOneOfAndSimpleDictionary';
export type { CompositionWithOneOfAnonymous } from './models/CompositionWithOneOfAnonymous';
export type { CompositionWithOneOfDiscriminator } from './models/CompositionWithOneOfDiscriminator';
export type { DeprecatedModel } from './models/DeprecatedModel';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings } from './models/EnumWithStrings';
export type { File } from './models/File';
export type { FreeFormObjectWithAdditionalPropertiesEqEmptyObject } from './models/FreeFormObjectWithAdditionalPropertiesEqEmptyObject';
export type { FreeFormObjectWithAdditionalPropertiesEqTrue } from './models/FreeFormObjectWithAdditionalPropertiesEqTrue';
export type { FreeFormObjectWithoutAdditionalProperties } from './models/FreeFormObjectWithoutAdditionalProperties';
export type { ModelCircle } from './models/ModelCircle';
export type { ModelSquare } from './models/ModelSquare';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { Pageable } from './models/Pageable';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleParameter } from './models/SimpleParameter';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $_default } from './schemas/$_default';
export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $CompositionBaseModel } from './schemas/$CompositionBaseModel';
export { $CompositionExtendedModel } from './schemas/$CompositionExtendedModel';
export { $CompositionWithAllOfAndNullable } from './schemas/$CompositionWithAllOfAndNullable';
export { $CompositionWithAnyOf } from './schemas/$CompositionWithAnyOf';
export { $CompositionWithAnyOfAndNullable } from './schemas/$CompositionWithAnyOfAndNullable';
export { $CompositionWithAnyOfAnonymous } from './schemas/$CompositionWithAnyOfAnonymous';
export { $CompositionWithOneOf } from './schemas/$CompositionWithOneOf';
export { $CompositionWithOneOfAndComplexArrayDictionary } from './schemas/$CompositionWithOneOfAndComplexArrayDictionary';
export { $CompositionWithOneOfAndNullable } from './schemas/$CompositionWithOneOfAndNullable';
export { $CompositionWithOneOfAndSimpleArrayDictionary } from './schemas/$CompositionWithOneOfAndSimpleArrayDictionary';
export { $CompositionWithOneOfAndSimpleDictionary } from './schemas/$CompositionWithOneOfAndSimpleDictionary';
export { $CompositionWithOneOfAnonymous } from './schemas/$CompositionWithOneOfAnonymous';
export { $CompositionWithOneOfDiscriminator } from './schemas/$CompositionWithOneOfDiscriminator';
export { $DeprecatedModel } from './schemas/$DeprecatedModel';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $File } from './schemas/$File';
export { $FreeFormObjectWithAdditionalPropertiesEqEmptyObject } from './schemas/$FreeFormObjectWithAdditionalPropertiesEqEmptyObject';
export { $FreeFormObjectWithAdditionalPropertiesEqTrue } from './schemas/$FreeFormObjectWithAdditionalPropertiesEqTrue';
export { $FreeFormObjectWithoutAdditionalProperties } from './schemas/$FreeFormObjectWithoutAdditionalProperties';
export { $ModelCircle } from './schemas/$ModelCircle';
export { $ModelSquare } from './schemas/$ModelSquare';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $Pageable } from './schemas/$Pageable';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleParameter } from './schemas/$SimpleParameter';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export * as pathnames from './pathnames'
export * as server from './server'
export * as client from './client'
"
`;
